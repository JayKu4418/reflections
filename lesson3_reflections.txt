When would you want to use a remote repository rather than keeping all your work local?

If I were working on a changes to the same code from different computers, perhaps a work laptop vs a home laptop. 
Or if multiple users were working on the same code and wanted to access it and push changes to it.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You may not always want to pull changes from Git, maybe you are waiting for someone to finish their code and they are not completely done yet. You want to have the choice of when to pull from the remote repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are when you clone someone else's repository on github so you get all their commits but any changes you make to yours won't affect the original. You clone to grab the repository you created on github server onto your local machine. You branch when you going in a different direction on your own repository. 
You should fork when you want to completely copy someone else's work and modify it. You should clone when you want a repository copied onto your local machine.

What is the benefit of having a copy of the last known state of the remote stored locally?

This way you will know what new changes you may have potentially introduced on your local repository that are different from what was last commited on the remote. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

By emailing someone my code and asking if it looks okay or making them walk over and asking them if it looks okay. It would be hard if the person was not always around and this way with Github, there would be notifications to your collaborator about changes you have made.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

This would useful when you are collaborating with multiple people and they are all working on different features which could potentially step on each other. Working on master directly is beneficial if you are the only one working on the project but even then it might be useful to have branches in order to make sure that you are certain about pushing a change into the main master branch.
